use super::nodes::*;
use super::lexer::{Token, LexicalError};

grammar<'input>(input: &'input str);

// templates
SimpleVec<T>: Vec<T> = {
    <v:(<T>)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
}

// no zero count, no end sep
SepVec<T, C>: Vec<T> = {
    <e:T> => {
        let mut v = Vec::new();
        v.push(e);
        v
    },
    <e:T> <v:(C <T>)+> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

// syntax
pub Chunk: Node = {
    Block,
}

Block: Node = {
    Stats,
}

Stats: Node = {
    <l:@L> <n:SimpleVec<Stat>> <r:@R> => Node::StatementList(Loc(l, r), n),
}

Stat: Node = {
    <l:@L> ";" <r:@R>                           => Node::StatementEmpty(Loc(l, r)),
    <l:@L> "do" <n:Block> "end" <r:@R>          => Node::StatementDoEnd(Loc(l, r), Box::new(n)),
    <l:@L> <n1:VarList> "=" <n2:ExpList> <r:@R> => Node::StatementVarExp(Loc(l, r), Box::new(n1), Box::new(n2)),
}

// RetStat
// Label
// Funcname

VarList: Node = {
    <l:@L> <n:SepVec<Var, ",">> <r:@R> => Node::VarList(Loc(l, r), n),
}

Var: Node = {
    <l:@L> <n:Name> <r:@R>                          => Node::Var(Loc(l, r), Box::new(n)),
    <l:@L> <e1:PrefixExp> "[" <e2:OpExp> "]" <r:@R> => Node::TableIndex(Loc(l, r), Box::new(e1), Box::new(e2)),
    <l:@L> <e1:PrefixExp> "." <e2:Name> <r:@R>      => Node::TableMember(Loc(l, r), Box::new(e1), Box::new(e2)),
}

NameList: Node = {
    <l:@L> <n:SepVec<Name, ",">> <r:@R> => Node::NameList(Loc(l, r), n),
}

Name: Node = {
    <l:@L> <s:LexVariable> <r:@R> => Node::Name(Loc(l, r), s.to_string()),
}

ExpList: Node = {
    <l:@L> <n:SepVec<OpExp, ",">> <r:@R> => Node::ExpList(Loc(l, r), n),
}

Exp: Node = {
    // StringLiteral
    TableConstructor,
    FunctionDef,
    PrefixExp,
    <l:@L> "nil" <r:@R>       => Node::Nil(Loc(l, r)),
    <l:@L> "false" <r:@R>     => Node::False(Loc(l, r)),
    <l:@L> "true" <r:@R>      => Node::True(Loc(l, r)),
    <l:@L> "..." <r:@R>       => Node::VarArg(Loc(l, r)),
    <l:@L> <s:Numeral> <r:@R> => Node::Numeral(Loc(l, r), s.parse::<f64>().unwrap()),
    <l:@L> "(" <e:OpExp> ")" <r:@R> => Node::RoundBrackets(Loc(l, r), Box::new(e)),
}

PrefixExp: Node = {
    Var,
    FunctionCall,
    // <l:@L> "(" <e:OpExp> ")" <r:@R> => Node::RoundBrackets(Loc(l, r), Box::new(e)),
}

FunctionCall: Node = {
    <l:@L> <n1:PrefixExp> <n2:Args> <r:@R>               => Node::FnStaticCall(Loc(l, r), Box::new(n1), Box::new(n2)),
    <l:@L> <n1:PrefixExp> ":" <n2:Name> <n3:Args> <r:@R> => Node::FnMethodCall(Loc(l, r), Box::new(n1), Box::new(n2), Box::new(n3)),
}

Args: Node = {
    <l:@L> "(" <e:ExpList> ")" <r:@R> => Node::RoundBrackets(Loc(l, r), Box::new(e)),
    <l:@L> "(" ")" <r:@R>             => Node::RoundBrackets(Loc(l, r), Box::new(Node::Empty)),
    TableConstructor,
    // StringLiteral
}

FunctionDef: Node = {
    <l:@L> "function" <n:FuncBody> <r:@R> => Node::FunctionDef(Loc(l, r), Box::new(n)),
}

FuncBody: Node = {
    <l:@L> "(" <n1:ParList> ")" <n2:Block> "end" <r:@R> => Node::FuncBody(Loc(l, r), Box::new(n1), Box::new(n2)),
    <l:@L> "(" ")" <n:Block> "end" <r:@R>               => Node::FuncBody(Loc(l, r), Box::new(Node::Empty), Box::new(n)),
}

ParList: Node = {
    <l:@L> <n:NameList> <r:@R>           => Node::ParList(Loc(l, r), Box::new(n), Box::new(Node::Empty)),
    // <l:@L> <n:NameList> "," "..." <r:@R> => Node::ParList(Loc(l, r), Box::new(n), Box::new(Node::VarArg(Loc(l, r)))),
    // <l:@L> "..." <r:@R>                  => Node::ParList(Loc(l, r), Box::new(Node::Empty), Box::new(Node::VarArg(Loc(l, r)))),
}

TableConstructor: Node = {
    <l:@L> "{" <e:FieldList> "}" <r:@R> => Node::TableConstructor(Loc(l, r), Box::new(e)),
}

FieldList: Node = {
    <l:@L> <v:SepVec<Field, FieldSep>> <r:@R> => Node::Fields(Loc(l, r), v),
}

Field: Node = {
    <l:@L> "[" <e1:OpExp> "]" "=" <e2:OpExp> <r:@R> => Node::FieldNamedBracket(Loc(l, r), Box::new(e1), Box::new(e2)),
    <l:@L> <e1:Var> "=" <e2:OpExp> <r:@R>           => Node::FieldNamed(Loc(l, r), Box::new(e1), Box::new(e2)),
    <l:@L> <e:OpExp> <r:@R>                         => Node::FieldSequential(Loc(l, r), Box::new(e)),
}

FieldSep = {
    ",",
    ";",
}

OpExp: Node = {
    Op0,
}

Op0: Node = {
    <e1:Op0> <l:@L> "or" <r:@R> <e2:Op1> => Node::LogicalOr(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op1,
}

Op1: Node = {
    <e1:Op1> <l:@L> "and" <r:@R> <e2:Op2> => Node::LogicalAnd(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op2,
}

Op2: Node = {
    <e1:Op2> <l:@L> "==" <r:@R> <e2:Op3> => Node::Equality(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op2> <l:@L> "~=" <r:@R> <e2:Op3> => Node::Inequality(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op2> <l:@L> "<"  <r:@R> <e2:Op3> => Node::LessThan(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op2> <l:@L> ">"  <r:@R> <e2:Op3> => Node::GreaterThan(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op2> <l:@L> "<=" <r:@R> <e2:Op3> => Node::LessOrEqual(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op2> <l:@L> ">=" <r:@R> <e2:Op3> => Node::GreaterOrEqual(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op3,
}

Op3: Node = {
    <e1:Op3> <l:@L> "|" <r:@R> <e2:Op4> => Node::BitwiseOr(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op4,
}

Op4: Node = {
    <e1:Op4> <l:@L> "~" <r:@R> <e2:Op5> => Node::BitwiseXor(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op5,
}

Op5: Node = {
    <e1:Op5> <l:@L> "&" <r:@R> <e2:Op6> => Node::BitwiseAnd(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op6,
}

Op6: Node = {
    <e1:Op6> <l:@L> "<<" <r:@R> <e2:Op7> => Node::LeftShift(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op6> <l:@L> ">>" <r:@R> <e2:Op7> => Node::RightShift(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op7,
}

Op7: Node = {
    <e1:Op7> <l:@L> ".." <r:@R> <e2:Op8> => Node::Concatenation(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op8,
}

Op8: Node = {
    <e1:Op8> <l:@L> "+" <r:@R> <e2:Op9> => Node::Addition(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op8> <l:@L> "-" <r:@R> <e2:Op9> => Node::Subtraction(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op9,
}

Op9: Node = {
    <e1:Op9> <l:@L> "*"  <r:@R> <e2:Op10> => Node::Multiplication(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op9> <l:@L> "/"  <r:@R> <e2:Op10> => Node::Division(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op9> <l:@L> "//" <r:@R> <e2:Op10> => Node::FloorDivision(Loc(l, r), Box::new(e1), Box::new(e2)),
    <e1:Op9> <l:@L> "%"  <r:@R> <e2:Op10> => Node::Modulo(Loc(l, r), Box::new(e1), Box::new(e2)),
    Op10,
}

Op10: Node = {
    <l:@L> "not" <r:@R> <e:Op11> => Node::UnaryNot(Loc(l, r), Box::new(e)),
    <l:@L> "#"   <r:@R> <e:Op11> => Node::UnaryLength(Loc(l, r), Box::new(e)),
    <l:@L> "-"   <r:@R> <e:Op11> => Node::UnaryMinus(Loc(l, r), Box::new(e)),
    <l:@L> "~"   <r:@R> <e:Op11> => Node::UnaryBitwiseXor(Loc(l, r), Box::new(e)),
    Op11,
}

Op11: Node = {
    <e1:Op11> <l:@L> "^" <r:@R> <e2:Exp> => Node::Exponentiation(Loc(l, r), Box::new(e1), Box::new(e2)),
    Exp,
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "^"   => Token::OpExponentiation,
        "not" => Token::OpLogicalNot,
        "#"   => Token::OpLength,
        "*"   => Token::OpMultiplication,
        "/"   => Token::OpDivision,
        "//"  => Token::OpFloorDivision,
        "%"   => Token::OpModulo,
        "+"   => Token::OpAddition,
        "-"   => Token::Minus,
        ".."  => Token::OpConcatenation,
        "<<"  => Token::OpLeftShift,
        ">>"  => Token::OpRightShift,
        "&"   => Token::OpBitwiseAnd,
        "~"   => Token::Tilde,
        "|"   => Token::OpBitwiseOr,
        "=="  => Token::OpEquality,
        "~="  => Token::OpInequality,
        "<"   => Token::OpLessThan,
        ">"   => Token::OpGreaterThan,
        "<="  => Token::OpLessOrEqual,
        ">="  => Token::OpGreaterOrEqual,
        "and" => Token::OpLogicalAnd,
        "or"  => Token::OpLogicalOr,
        ";"   => Token::Semicolon,
        ","   => Token::Comma,
        ":"   => Token::Colon,
        "("   => Token::OpenRoundBracket,
        ")"   => Token::CloseRoundBracket,
        "["   => Token::OpenSquareBracket,
        "]"   => Token::CloseSquareBracket,
        "{"   => Token::OpenCurlyBracket,
        "}"   => Token::CloseCurlyBracket,
        "="   => Token::EqualsSign,
        "."   => Token::Period,

        "nil"      => Token::Nil,
        "false"    => Token::False,
        "true"     => Token::True,
        "..."      => Token::VarArg,
        "function" => Token::Function,
        "do"       => Token::Do,
        "end"      => Token::End,

        LexVariable => Token::Variable(<&'input str>),
        Numeral => Token::Number(<&'input str>),
    }
}
