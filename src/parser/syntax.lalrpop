use super::nodes::*;
use super::lexer::{Token, LexicalError};

grammar<'input>(input: &'input str);

// templates
// cannot be empty, no separators
TList<T>: Vec<(Loc, T)> = {
    <e:T> => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), e));
        v
    },
    <v:TList<T>> <l1:@R> <r1:@L> <e:T> => {
        let mut v = v;
        v.push((Loc(l1, r1), e));
        v
    },
}

// cannot be empty, no separator at the end
TSepList<T, C>: Vec<(Loc, T, Loc)> = {
    <e:T> => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), e, Loc(0, 0)));
        v
    },
    <e:T> <l1:@R> <r1:@L> C <l2:@R> <r2:@L> <v:TSepList<T, C>> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l2, r2);
        }
        v.insert(0, (Loc(0, 0), e, Loc(l1, r1)));
        v
    }
};

// can be empty, no separator at the end
TEmptySepList<T, C>: Vec<(Loc, T, Loc)> = {
    => Vec::new(),
    <e:T> => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), e, Loc(0, 0)));
        v
    },
    <e:T> <l1:@R> <r1:@L> C <l2:@R> <r2:@L> <v:TEmptySepList<T, C>> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l2, r2);
        }
        v.insert(0, (Loc(0, 0), e, Loc(l1, r1)));
        v
    }
};

// cannot be empty, may have a separator at the end
TSepEndList<T, C>: Vec<(Loc, T, Loc)> = {
    <e:T> <l2:@R> <r2:@L> C? => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), e, Loc(l2, r2)));
        v
    },
    <e:T> <l1:@R> <r1:@L> C <l2:@R> <r2:@L> <v:TSepEndList<T, C>> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l2, r2);
        }
        v.insert(0, (Loc(0, 0), e, Loc(l1, r1)));
        v
    },
};

// syntax
pub Chunk: Node = {
    => Node::StatementList(Loc(0, 0), Vec::new()),
    Block,
}

Block: Node = {
    Stats,
    RetStat,
    <ls:@L> <n1:Stats> <l1:@R> <r1:@L> <n2:RetStat> <rs:@R>
        => Node::StatsRetStat(Loc(ls, rs), [Loc(l1, r1)], Box::new(n1), Box::new(n2)),
}

Stats: Node = {
    <ls:@L> <n:StatStartsMayEndsPar> <rs:@R> => {
        let mut v = Vec::new();
        v.insert(0, (Loc(0, 0), n));
        Node::StatementList(Loc(ls, rs), v)
    },
    <ls:@L> <n:StatStartsMayEndsPar> <l1:@R> <r1:@L> <v:TList<Stat>> <rs:@R> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l1, r1);
        }
        v.insert(0, (Loc(0, 0), n));
        Node::StatementList(Loc(ls, rs), v)
    },
    <ls:@L> <v:TList<Stat>> <rs:@R> => Node::StatementList(Loc(ls, rs), v),
}

Stat: Node = {
    StatNoPar,
    StatMayEndsPar,
    <ls:@L> <n1:StatNoPar> <l1:@R> <r1:@L> <n2:StatStartsMayEndsPar> <rs:@R> => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), n1));
        v.push((Loc(l1, r1), n2));
        Node::StatementList(Loc(ls, rs), v)
    },
}

StatStartsMayEndsPar: Node = {
    <l:@L> <n1:VarListStartsPar> "=" <n2:ExpList> <r:@R> => Node::VarsExprs(Loc(l, r), Box::new(n1), Box::new(n2)),
    FunctionCallStartsMayEndsPar,
}

StatMayEndsPar: Node = {
    FunctionCallNoStartsMayEndsPar,
    <l:@L> <n1:VarListNoStartPar> "=" <n2:ExpList> <r:@R> => Node::VarsExprs(Loc(l, r), Box::new(n1), Box::new(n2)),

    <l:@L> "repeat" <n:Block> "until" <e:OpExp> <r:@R>
        => Node::RepeatBUntil(Loc(l, r), Box::new(n), Box::new(e)),
    <l:@L> "repeat" "until" <e:OpExp> <r:@R>
        => Node::RepeatUntil(Loc(l, r), Box::new(e)),

    <ls:@L> "local" <l1:@R> <r1:@L> <n1:NameList> <l2:@R> <r2:@L> "=" <l3:@R> <r3:@L> <n2:ExpList> <rs:@R>
        => Node::LocalNamesExprs(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(n1), Box::new(n2)),
}

StatNoPar: Node = {
    <ls:@L> ";" <rs:@R> => Node::Empty(Loc(ls, rs)),
    Label,
    <ls:@L> "break" <rs:@R> => Node::Break(Loc(ls, rs)),
    <ls:@L> "goto" <l1:@R> <r1:@L> <n:Name> <rs:@R>
        => Node::GoTo(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),

    <ls:@L> "do" <l1:@R> <r1:@L> "end" <rs:@R>
        => Node::DoEnd(Loc(ls, rs), [Loc(l1, r1)]),
    <ls:@L> "do" <l1:@R> <r1:@L> <n:Block> <l2:@R> <r2:@L> "end" <rs:@R>
        => Node::DoBEnd(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(n)),

    <ls:@L> "while" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "do" <l3:@R> <r3:@L> "end" <rs:@R>
        => Node::WhileDo(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e)),
    <ls:@L> "while" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "do" <l3:@R> <r3:@L> <b:Block> <l4:@R> <r4:@L> "end" <rs:@R>
        => Node::WhileDoB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(e), Box::new(b)),

    // if
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> "end" <rs:@R>
        => Node::IfThen(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e1)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L> "end" <rs:@R>
        => Node::IfThenB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(e1), Box::new(b1)),

    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> "else" <l4:@R> <r4:@L> "end" <rs:@R>
        => Node::IfThenElse(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(e1)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L>
            "else" <l5:@R> <r5:@L> "end" <rs:@R>
        => Node::IfThenBElse(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5)],
                             Box::new(e1), Box::new(b1)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> "else" <l4:@R> <r4:@L> <b2:Block>
            <l5:@R> <r5:@L> "end" <rs:@R>
        => Node::IfThenElseB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5)],
                             Box::new(e1), Box::new(b2)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L>
            "else" <l5:@R> <r5:@L> <b2:Block> <l6:@R> <r6:@L> "end" <rs:@R>
        => Node::IfThenBElseB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6)],
                            Box::new(e1), Box::new(b1), Box::new(b2)),

    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <n:ElseIfThenVec> <l4:@R> <r4:@L>
            "end" <rs:@R>
        => Node::IfThenElseIf(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(e1), Box::new(n)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L>
            <n:ElseIfThenVec> <l5:@R> <r5:@L> "end" <rs:@R>
        => Node::IfThenBElseIf(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5)],
                              Box::new(e1), Box::new(b1), Box::new(n)),

    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <n:ElseIfThenVec> <l4:@R> <r4:@L>
            "else" <l5:@R> <r5:@L> "end" <rs:@R>
        => Node::IfThenElseIfElse(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5)],
                                  Box::new(e1), Box::new(n)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L>
            <n:ElseIfThenVec> <l5:@R> <r5:@L> "else" <l6:@R> <r6:@L> "end" <rs:@R>
        => Node::IfThenBElseIfElse(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5),
                                   Loc(l6, r6)], Box::new(e1), Box::new(b1), Box::new(n)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <n:ElseIfThenVec> <l4:@R> <r4:@L>
            "else" <l5:@R> <r5:@L> <b2:Block> <l6:@R> <r6:@L> "end" <rs:@R>
        => Node::IfThenElseIfElseB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5),
                                   Loc(l6, r6)], Box::new(e1), Box::new(n), Box::new(b2)),
    <ls:@L> "if" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b1:Block> <l4:@R> <r4:@L>
            <n:ElseIfThenVec> <l5:@R> <r5:@L> "else" <l6:@R> <r6:@L> <b2:Block> <l7:@R> <r7:@L> "end" <rs:@R>
        => Node::IfThenBElseIfElseB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5),
                                    Loc(l6, r6), Loc(l7, r7)], Box::new(e1), Box::new(b1), Box::new(n), Box::new(b2)),

    // for
    <ls:@L> "for" <l1:@R> <r1:@L> <n:Name> <l2:@R> <r2:@L> "=" <l3:@R> <r3:@L> <e1:OpExp> <l4:@R> <r4:@L> ","
            <l5:@R> <r5:@L> <e2:OpExp> <l6:@R> <r6:@L> "do" <l7:@R> <r7:@L> "end" <rs:@R>
        => Node::ForInt(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6),
                        Loc(l7, r7)], Box::new(n), Box::new(e1), Box::new(e2)),

    <ls:@L> "for" <l1:@R> <r1:@L> <n:Name> <l2:@R> <r2:@L> "=" <l3:@R> <r3:@L> <e1:OpExp> <l4:@R> <r4:@L> ","
            <l5:@R> <r5:@L> <e2:OpExp> <l6:@R> <r6:@L> "do" <l7:@R> <r7:@L> <b:Block> <l8:@R> <r8:@L> "end" <rs:@R>
        => Node::ForIntB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6),
                        Loc(l7, r7), Loc(l8, r8)], Box::new(n), Box::new(e1), Box::new(e2), Box::new(b)),

    <ls:@L> "for" <l1:@R> <r1:@L> <n:Name> <l2:@R> <r2:@L> "=" <l3:@R> <r3:@L> <e1:OpExp> <l4:@R> <r4:@L> ","
            <l5:@R> <r5:@L> <e2:OpExp> <l6:@R> <r6:@L> "," <l7:@R> <r7:@L> <e3:OpExp> <l8:@R> <r8:@L> "do"
            <l9:@R> <r9:@L> "end" <rs:@R>
        => Node::ForIntStep(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6),
                            Loc(l7, r7), Loc(l8, r8), Loc(l9, r9)], Box::new(n), Box::new(e1), Box::new(e2), Box::new(e3)),

    <ls:@L> "for" <l1:@R> <r1:@L> <n:Name> <l2:@R> <r2:@L> "=" <l3:@R> <r3:@L> <e1:OpExp> <l4:@R> <r4:@L> ","
            <l5:@R> <r5:@L> <e2:OpExp> <l6:@R> <r6:@L> "," <l7:@R> <r7:@L> <e3:OpExp> <l8:@R> <r8:@L> "do"
            <l9:@R> <r9:@L> <b:Block> <l10:@R> <r10:@L> "end" <rs:@R>
        => Node::ForIntStepB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6),
                            Loc(l7, r7), Loc(l8, r8), Loc(l9, r9), Loc(l10, r10)], Box::new(n), Box::new(e1), Box::new(e2),
                            Box::new(e3), Box::new(b)),

    <ls:@L> "for" <l1:@R> <r1:@L> <n:NameList> <l2:@R> <r2:@L> "in" <l3:@R> <r3:@L> <e:ExpList> <l4:@R> <r4:@L> "do"
            <l5:@R> <r5:@L> "end" <rs:@R>
        => Node::ForRange(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5)], Box::new(n),
                          Box::new(e)),

    <ls:@L> "for" <l1:@R> <r1:@L> <n:NameList> <l2:@R> <r2:@L> "in" <l3:@R> <r3:@L> <e:ExpList> <l4:@R> <r4:@L> "do"
            <l5:@R> <r5:@L> <b:Block> <l6:@R> <r6:@L> "end" <rs:@R>
        => Node::ForRangeB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4), Loc(l5, r5), Loc(l6, r6)],
                          Box::new(n), Box::new(e), Box::new(b)),

    // function, local
    <ls:@L> "function" <l1:@R> <r1:@L> <n1:FuncName> <l2:@R> <r2:@L> <n2:FuncBody> <rs:@R>
        => Node::FuncDecl(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(n1), Box::new(n2)),
    <ls:@L> "local" <l1:@R> <r1:@L> "function" <l2:@R> <r2:@L> <n1:Name> <l3:@R> <r3:@L> <n2:FuncBody> <rs:@R>
        => Node::LocalFuncDecl(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(n1), Box::new(n2)),
    <ls:@L> "local" <l1:@R> <r1:@L> <n:NameList> <rs:@R>
        => Node::LocalNames(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),
}

ElseIfThenVec: Node = {
    <ls:@L> <v:TList<ElseIfThen>> <rs:@R> => Node::ElseIfThenVec(Loc(ls, rs), v),
}

ElseIfThen: Node = {
    <ls:@L> "elseif" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "then" <rs:@R>
        => Node::ElseIfThen(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "elseif" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "then" <l3:@R> <r3:@L> <b:Block> <rs:@R>
        => Node::ElseIfThenB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e), Box::new(b)),
}

RetStat: Node = {
    <ls:@L> "return" <rs:@R>
        => Node::RetStatNone(Loc(ls, rs)),
    <ls:@L> "return" <l1:@R> <r1:@L> <n:ExpList> <rs:@R>
        => Node::RetStatExpr(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),
    <ls:@L> "return" <l1:@R> <r1:@L> ";" <rs:@R>
        => Node::RetStatNoneComma(Loc(ls, rs), [Loc(l1, r1)]),
    <ls:@L> "return" <l1:@R> <r1:@L> <n:ExpList> <l2:@R> <r2:@L> ";" <rs:@R>
        => Node::RetStatExprComma(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(n)),
}

Label: Node = {
    <ls:@L> "::" <l1:@R> <r1:@L> <n:Name> <l2:@R> <r2:@L> "::" <rs:@R>
        => Node::Label(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(n)),
}

FuncName: Node = {
    <ls:@L> <v:TSepList<Name, ".">> <rs:@R>
        => Node::FuncName(Loc(ls, rs), v),
    <ls:@L> <v:TSepList<Name, ".">> <l1:@R> <r1:@L> ":" <l2:@R> <r2:@L> <n:Name> <rs:@R>
        => Node::FuncNameSelf(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], v, Box::new(n)),
}

// additional rules

VarListStartsPar: Node = {
    VarExp,
    <ls:@L> <n:VarExp> <l1:@R> <r1:@L> "," <l2:@R> <r2:@L> <v:TSepList<VarMayExp, ",">> <rs:@R> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l2, r2);
        }
        v.insert(0, (Loc(0, 0), n, Loc(l1, r1)));
        Node::VarList(Loc(ls, rs), v)
    },
}

VarListNoStartPar: Node = {
    <ls:@L> <n:VarNoExp> <rs:@R> => {
        let mut v = Vec::new();
        v.push((Loc(0, 0), n, Loc(0, 0)));
        Node::VarList(Loc(ls, rs), v)
    },
    <ls:@L> <n:VarNoExp> <l1:@R> <r1:@L> "," <l2:@R> <r2:@L> <v:TSepList<VarMayExp, ",">> <rs:@R> => {
        let mut v = v;
        if !v.is_empty() {
            v[0].0 = Loc(l2, r2);
        }
        v.insert(0, (Loc(0, 0), n, Loc(l1, r1)));
        Node::VarList(Loc(ls, rs), v)
    }
}

FunctionCallNoStartsMayEndsPar: Node = {
    <ls:@L> <n1:Name> <l1:@R> <r1:@L> <n2:VarSuffixList> <rs:@R>
        => Node::Var(Loc(ls, rs), [Loc(l1, r1)], Box::new(n1), Box::new(n2)),
}

PrefixNoEndsPar: Node = {
    VarNoPar,
}

VarNoPar: Node = {
    Name,
    <ls:@L> <n1:Name> <l1:@R> <r1:@L> <n2:VarSuffixListNoEndPar> <rs:@R>
        => Node::Var(Loc(ls, rs), [Loc(l1, r1)], Box::new(n1), Box::new(n2)),
}

VarNoExp: Node = {
    Name,
    <ls:@L> <n1:Name> <l1:@R> <r1:@L> <n2:VarSuffixList> <rs:@R>
        => Node::Var(Loc(ls, rs), [Loc(l1, r1)], Box::new(n1), Box::new(n2)),
}

FunctionCallStartsMayEndsPar: Node = {
    <ls:@L> "(" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> ")" <rs:@R>
        => Node::RoundBrackets(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "(" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> ")" <l3:@R> <r3:@L> <n:VarSuffixList> <rs:@R>
        => Node::VarRoundSuffix(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e), Box::new(n)),
}

PrefixMayStartsMayEndsPar: Node = {
    VarMayExp,
    <ls:@L> "(" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> ")" <rs:@R>
        => Node::RoundBrackets(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
}

VarExp: Node = {
    <ls:@L> "(" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> ")" <l3:@R> <r3:@L> <n:VarSuffixList> <rs:@R>
        => Node::VarRoundSuffix(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e), Box::new(n)),
}

VarMayExp: Node = {
    Name,
    <ls:@L> <n1:Name> <l1:@R> <r1:@L> <n2:VarSuffixList> <rs:@R>
        => Node::Var(Loc(ls, rs), [Loc(l1, r1)], Box::new(n1), Box::new(n2)),
    <ls:@L> "(" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> ")" <l3:@R> <r3:@L> <n:VarSuffixList> <rs:@R>
        => Node::VarRoundSuffix(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(e), Box::new(n)),
}

VarSuffixList: Node = {
    <ls:@L> <v:TList<VarSuffix>> <rs:@R> => Node::VarSuffixList(Loc(ls, rs), v),
}

VarSuffixListNoEndPar: Node = {
    VarSuffixNoEndPar,
    <ls:@L> <v:TList<VarSuffix>> <l1:@R> <r1:@L> <n:VarSuffixNoEndPar> <rs:@R> => {
        let mut v = v;
        v.push((Loc(l1, r1), n));
        Node::VarSuffixList(Loc(ls, rs), v)
    },
}

VarSuffixNoEndPar: Node = {
    <ls:@L> "[" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "]" <rs:@R>
        => Node::TableIndex(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "." <l1:@R> <r1:@L> <n:Name> <rs:@R>
        => Node::TableMember(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),
}

VarSuffix: Node = {
    Args,
    <ls:@L> "[" <l1:@R> <r1:@L> <e:OpExp> <l2:@R> <r2:@L> "]" <rs:@R>
        => Node::TableIndex(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "." <l1:@R> <r1:@L> <n:Name> <rs:@R>
        => Node::TableMember(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),
    <ls:@L> ":" <l1:@R> <r1:@L> <n1:Name> <l2:@R> <r2:@L> <n2:Args> <rs:@R>
        => Node::FnMethodCall(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(n1), Box::new(n2)),
}

// common rules

NameList: Node = {
    <ls:@L> <v:TSepList<Name, ",">> <rs:@R> => Node::NameList(Loc(ls, rs), v),
}

ExpList: Node = {
    <ls:@L> <v:TSepList<OpExp, ",">> <rs:@R> => Node::ExpList(Loc(ls, rs), v),
}

Exp: Node = {
    <ls:@L> "nil" <rs:@R>       => Node::Nil(Loc(ls, rs)),
    <ls:@L> "false" <rs:@R>     => Node::False(Loc(ls, rs)),
    <ls:@L> "true" <rs:@R>      => Node::True(Loc(ls, rs)),
    <ls:@L> <s:Numeral> <rs:@R> => Node::Numeral(Loc(ls, rs), s.to_string()),
    StringLiteral,
    <ls:@L> "..." <rs:@R> => Node::VarArg(Loc(ls, rs)),
    FunctionDef,
    PrefixMayStartsMayEndsPar,
    TableConstructor,
}

Args: Node = {
    <ls:@L> "(" <l1:@R> <r1:@L> <e:ExpList> <l2:@R> <r2:@L> ")" <rs:@R>
        => Node::RoundBrackets(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "(" <l1:@R> <r1:@L> ")" <rs:@R>
        => Node::RoundBracketsEmpty(Loc(ls, rs), [Loc(l1, r1)]),
    TableConstructor,
    StringLiteral,
}

FunctionDef: Node = {
    <ls:@L> "function" <l1:@R> <r1:@L> <n:FuncBody> <rs:@R>
        => Node::FunctionDef(Loc(ls, rs), [Loc(l1, r1)], Box::new(n)),
}

FuncBody: Node = {
    <ls:@L> "(" <l1:@R> <r1:@L> <n1:ParList> <l2:@R> <r2:@L> ")" <l3:@R> <r3:@L> "end" <rs:@R>
        => Node::FuncBody(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3)], Box::new(n1)),
    <ls:@L> "(" <l1:@R> <r1:@L> <n1:ParList> <l2:@R> <r2:@L> ")" <l3:@R> <r3:@L> <n2:Block> <l4:@R> <r4:@L> "end" <rs:@R>
        => Node::FuncBodyB(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(n1), Box::new(n2)),
}

ParList: Node = {
    <ls:@L> <v:TEmptySepList<Par, ",">> <rs:@R> => Node::ParList(Loc(ls, rs), v),
}

Par: Node = {
    Name,
    <ls:@L> "..." <rs:@R> => Node::VarArg(Loc(ls, rs)),
}

TableConstructor: Node = {
    <ls:@L> "{" <l1:@R> <r1:@L> <e:FieldList> <l2:@R> <r2:@L> "}" <rs:@R>
        => Node::TableConstructor(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e)),
    <ls:@L> "{" <l1:@R> <r1:@L> "}" <rs:@R>
        => Node::TableConstructorEmpty(Loc(ls, rs), [Loc(l1, r1)]),
}

FieldList: Node = {
    <ls:@L> <v:TSepEndList<Field, FieldSep>> <rs:@R> => Node::Fields(Loc(ls, rs), v),
}

Field: Node = {
    <ls:@L> "[" <l1:@R> <r1:@L> <e1:OpExp> <l2:@R> <r2:@L> "]" <l3:@R> <r3:@L> "=" <l4:@R> <r4:@L> <e2:OpExp> <rs:@R>
        => Node::FieldNamedBracket(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2), Loc(l3, r3), Loc(l4, r4)], Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Name> <l1:@R> <r1:@L> "=" <l2:@R> <r2:@L> <e2:OpExp> <rs:@R>
        => Node::FieldNamed(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Box::new(e1), Box::new(e2)),
    <ls:@L> <e:OpExp> <rs:@R> => Node::FieldSequential(Loc(ls, rs), Box::new(e)),
}

FieldSep = {
    ",",
    ";",
}

OpExp: Node = {
    Op0<Exp>,
}

Op0<T>: Node = {
    <ls:@L> <e1:Op0<T>> <l1:@R> <r1:@L> "or" <l2:@R> <r2:@L> <e2:Op1<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("or"), Box::new(e1), Box::new(e2)),
    Op1<T>,
}

Op1<T>: Node = {
    <ls:@L> <e1:Op1<T>> <l1:@R> <r1:@L> "and" <l2:@R> <r2:@L> <e2:Op2<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("and"), Box::new(e1), Box::new(e2)),
    Op2<T>,
}

Op2<T>: Node = {
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> "==" <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("=="), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> "~=" <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("~="), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> "<"  <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("<"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> ">"  <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str(">"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> "<=" <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("<="), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op2<T>> <l1:@R> <r1:@L> ">=" <l2:@R> <r2:@L> <e2:Op3<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str(">="), Box::new(e1), Box::new(e2)),
    Op3<T>,
}

Op3<T>: Node = {
    <ls:@L> <e1:Op3<T>> <l1:@R> <r1:@L> "|" <l2:@R> <r2:@L> <e2:Op4<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("|"), Box::new(e1), Box::new(e2)),
    Op4<T>,
}

Op4<T>: Node = {
    <ls:@L> <e1:Op4<T>> <l1:@R> <r1:@L> "~" <l2:@R> <r2:@L> <e2:Op5<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("~"), Box::new(e1), Box::new(e2)),
    Op5<T>,
}

Op5<T>: Node = {
    <ls:@L> <e1:Op5<T>> <l1:@R> <r1:@L> "&" <l2:@R> <r2:@L> <e2:Op6<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("&"), Box::new(e1), Box::new(e2)),
    Op6<T>,
}

Op6<T>: Node = {
    <ls:@L> <e1:Op6<T>> <l1:@R> <r1:@L> "<<" <l2:@R> <r2:@L> <e2:Op7<T>> <rs:@R>
        => Node::BinaryOp( Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("<<"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op6<T>> <l1:@R> <r1:@L> ">>" <l2:@R> <r2:@L> <e2:Op7<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str(">>"), Box::new(e1), Box::new(e2)),
    Op7<T>,
}

// right-associative
Op7<T>: Node = {
    <ls:@L> <e1:Op8<T>> <l1:@R> <r1:@L> ".." <l2:@R> <r2:@L> <e2:Op7<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str(".."), Box::new(e1), Box::new(e2)),
    Op8<T>,
}

Op8<T>: Node = {
    <ls:@L> <e1:Op8<T>> <l1:@R> <r1:@L> "+" <l2:@R> <r2:@L> <e2:Op9<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("+"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op8<T>> <l1:@R> <r1:@L> "-" <l2:@R> <r2:@L> <e2:Op9<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("-"), Box::new(e1), Box::new(e2)),
    Op9<T>,
}

Op9<T>: Node = {
    <ls:@L> <e1:Op9<T>> <l1:@R> <r1:@L> "*"  <l2:@R> <r2:@L> <e2:Op10<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("*"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op9<T>> <l1:@R> <r1:@L> "/"  <l2:@R> <r2:@L> <e2:Op10<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("/"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op9<T>> <l1:@R> <r1:@L> "//" <l2:@R> <r2:@L> <e2:Op10<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("//"), Box::new(e1), Box::new(e2)),
    <ls:@L> <e1:Op9<T>> <l1:@R> <r1:@L> "%"  <l2:@R> <r2:@L> <e2:Op10<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("%"), Box::new(e1), Box::new(e2)),
    Op10<T>,
}

Op10<T>: Node = {
    <ls:@L> "not" <l1:@R> <r1:@L> <e:Op11<T>> <rs:@R>
        => Node::UnaryNot(Loc(ls, rs), [Loc(l1, r1)], Box::new(e)),
    <ls:@L> "#"   <l1:@R> <r1:@L> <e:Op11<T>> <rs:@R>
        => Node::UnaryOp(Loc(ls, rs), [Loc(l1, r1)], Str("#"), Box::new(e)),
    <ls:@L> "-"   <l1:@R> <r1:@L> <e:Op11<T>> <rs:@R>
        => Node::UnaryOp(Loc(ls, rs), [Loc(l1, r1)], Str("-"), Box::new(e)),
    <ls:@L> "~"   <l1:@R> <r1:@L> <e:Op11<T>> <rs:@R>
        => Node::UnaryOp(Loc(ls, rs), [Loc(l1, r1)], Str("~"), Box::new(e)),
    Op11<T>,
}

// right-associative
Op11<T>: Node = {
    <ls:@L> <e1:T> <l1:@R> <r1:@L> "^" <l2:@R> <r2:@L> <e2:Op11<T>> <rs:@R>
        => Node::BinaryOp(Loc(ls, rs), [Loc(l1, r1), Loc(l2, r2)], Str("^"), Box::new(e1), Box::new(e2)),
    T,
}

Name: Node = {
    <l:@L> <s:LexVariable> <r:@R> => Node::Name(Loc(l, r), s.to_string()),
}

StringLiteral: Node = {
    <l:@L> <s:NormalStringLiteral> <r:@R>    => Node::NormalStringLiteral(Loc(l, r), s.to_string()),
    <l:@L> <s:CharStringLiteral> <r:@R>      => Node::CharStringLiteral(Loc(l, r), s.to_string()),
    <l:@L> <v:MultilineStringLiteral> <r:@R> => Node::MultilineStringLiteral(Loc(l, r), v.0, v.1.to_string()),
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "^"   => Token::OpExponentiation,
        "not" => Token::OpLogicalNot,
        "#"   => Token::OpLength,
        "*"   => Token::OpMultiplication,
        "/"   => Token::OpDivision,
        "//"  => Token::OpFloorDivision,
        "%"   => Token::OpModulo,
        "+"   => Token::OpAddition,
        "-"   => Token::Minus,
        ".."  => Token::OpConcatenation,
        "<<"  => Token::OpLeftShift,
        ">>"  => Token::OpRightShift,
        "&"   => Token::OpBitwiseAnd,
        "~"   => Token::Tilde,
        "|"   => Token::OpBitwiseOr,
        "=="  => Token::OpEquality,
        "~="  => Token::OpInequality,
        "<"   => Token::OpLessThan,
        ">"   => Token::OpGreaterThan,
        "<="  => Token::OpLessOrEqual,
        ">="  => Token::OpGreaterOrEqual,
        "and" => Token::OpLogicalAnd,
        "or"  => Token::OpLogicalOr,
        ";"   => Token::Semicolon,
        ","   => Token::Comma,
        ":"   => Token::Colon,
        "::"  => Token::Label,
        "("   => Token::OpenRoundBracket,
        ")"   => Token::CloseRoundBracket,
        "["   => Token::OpenSquareBracket,
        "]"   => Token::CloseSquareBracket,
        "{"   => Token::OpenCurlyBracket,
        "}"   => Token::CloseCurlyBracket,
        "="   => Token::EqualsSign,
        "."   => Token::Period,

        "..."      => Token::VarArg,
        "break"    => Token::Break,
        "do"       => Token::Do,
        "else"     => Token::Else,
        "elseif"   => Token::ElseIf,
        "end"      => Token::End,
        "false"    => Token::False,
        "for"      => Token::For,
        "function" => Token::Function,
        "goto"     => Token::GoTo,
        "if"       => Token::If,
        "in"       => Token::In,
        "local"    => Token::Local,
        "nil"      => Token::Nil,
        "repeat"   => Token::Repeat,
        "return"   => Token::Return,
        "then"     => Token::Then,
        "true"     => Token::True,
        "until"    => Token::Until,
        "while"    => Token::While,

        LexVariable            => Token::Variable(<&'input str>),
        Numeral                => Token::Numeral(<&'input str>),
        NormalStringLiteral    => Token::NormalStringLiteral(<&'input str>),
        CharStringLiteral      => Token::CharStringLiteral(<&'input str>),
        MultilineStringLiteral => Token::MultilineStringLiteral(<usize>, <&'input str>),
    }
}
